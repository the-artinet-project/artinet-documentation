<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="event-stream_8ts" kind="file" language="C++">
    <compoundname>event-stream.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Event<sp/>stream<sp/>utilities<sp/>for<sp/>handling<sp/>Server-Sent<sp/>Events<sp/>(SSE).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>parseResponse<sp/>}<sp/>from<sp/>&quot;../rpc/parser.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>createParser,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EventSourceMessage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ParseError,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;eventsource-parser&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>type<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>JSONRPCResponse,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A2ARequest,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../types/extended-schema.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>sendJsonRpcRequest<sp/>}<sp/>from<sp/>&quot;../rpc/rpc-client.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>logError,<sp/>logWarn,<sp/>logDebug<sp/>}<sp/>from<sp/>&quot;../../utils/logging/log.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Creates<sp/>an<sp/>async<sp/>generator<sp/>for<sp/>processing<sp/>task<sp/>events<sp/>from<sp/>an<sp/>SSE<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@template<sp/>T<sp/>The<sp/>type<sp/>of<sp/>task<sp/>event<sp/>to<sp/>process<sp/>(TaskStatusUpdateEvent<sp/>or<sp/>TaskArtifactUpdateEvent)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>response<sp/>The<sp/>fetch<sp/>Response<sp/>object<sp/>containing<sp/>the<sp/>event<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>An<sp/>async<sp/>generator<sp/>yielding<sp/>the<sp/>specified<sp/>type<sp/>of<sp/>task<sp/>events<sp/>from<sp/>StreamingResponse</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function*<sp/>handleEventStream&lt;StreamRes<sp/>extends<sp/>JSONRPCResponse&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>response:<sp/>Response</highlight></codeline>
<codeline><highlight class="normal">):<sp/>AsyncGenerator&lt;NonNullable&lt;StreamRes[&quot;result&quot;]&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!response.ok<sp/>||<sp/>!response.body)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>let<sp/>errorText:<sp/>string<sp/>|<sp/>null<sp/>=<sp/>null;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errorText<sp/>=<sp/>await<sp/>response.text();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(_)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;handleEventStream&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>`HTTP<sp/>error<sp/>[${response.status}:${response.statusText}]<sp/>-<sp/>${errorText}`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>Error(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`HTTP<sp/>error<sp/>[${response.status}:${response.statusText}]<sp/>-<sp/>${errorText}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>`HTTP<sp/>error<sp/>[${response.status}:${response.statusText}]<sp/>-<sp/>${errorText}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>eventsource-parser<sp/>to<sp/>process<sp/>the<sp/>SSE<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>reader<sp/>=<sp/>response.body.getReader();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>decoder<sp/>=<sp/>new<sp/>TextDecoder();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>events:<sp/>StreamRes[&quot;result&quot;][]<sp/>=<sp/>[];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>parser<sp/>=<sp/>createParser({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onEvent:<sp/>(event:<sp/>EventSourceMessage)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(event.data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(event.event<sp/>===<sp/>&quot;close&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logDebug(&quot;handleEventStream&quot;,<sp/>&quot;Stream<sp/>closed&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>parsedData<sp/>=<sp/>parseResponse&lt;StreamRes&gt;(event.data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>eventResult<sp/>=<sp/>parsedData.result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eventResult)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events.push(eventResult<sp/>as<sp/>StreamRes[&quot;result&quot;]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logWarn(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;handleEventStream&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Failed<sp/>to<sp/>parse<sp/>SSE<sp/>data&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedData</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(parsedData.final<sp/>&amp;&amp;<sp/>parsedData.final<sp/>===<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>logDebug(&quot;handleEventStream&quot;,<sp/>&quot;Stream<sp/>completed&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logWarn(&quot;handleEventStream&quot;,<sp/>&quot;Failed<sp/>to<sp/>parse<sp/>SSE<sp/>data&quot;,<sp/>e);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onError:<sp/>(error:<sp/>ParseError)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logError(&quot;handleEventStream&quot;,<sp/>&quot;Error<sp/>parsing<sp/>SSE<sp/>data&quot;,<sp/>error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onRetry:<sp/>(retry:<sp/>number)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logWarn(&quot;handleEventStream&quot;,<sp/>&quot;Retrying<sp/>SSE<sp/>connection&quot;,<sp/>retry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>{<sp/>done,<sp/>value<sp/>}<sp/>=<sp/>await<sp/>reader.read();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(done)<sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>chunk<sp/>=<sp/>decoder.decode(value,<sp/>{<sp/>stream:<sp/>true<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser.feed(chunk);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(events.length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/>events.shift()!;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>finally<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reader.releaseLock();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Executes<sp/>a<sp/>streaming<sp/>JSON-RPC<sp/>request<sp/>and<sp/>yields<sp/>events<sp/>as<sp/>they<sp/>arrive</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@template<sp/>Req<sp/>The<sp/>type<sp/>of<sp/>request<sp/>being<sp/>made</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@template<sp/>StreamRes<sp/>The<sp/>type<sp/>of<sp/>streaming<sp/>response<sp/>expected</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>baseUrl<sp/>The<sp/>base<sp/>URL<sp/>for<sp/>the<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>method<sp/>The<sp/>JSON-RPC<sp/>method<sp/>to<sp/>call</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>params<sp/>The<sp/>parameters<sp/>for<sp/>the<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>customHeaders<sp/>Any<sp/>custom<sp/>headers<sp/>to<sp/>include<sp/>in<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>An<sp/>AsyncIterable<sp/>yielding<sp/>events<sp/>from<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function*<sp/>executeStreamEvents&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Req<sp/>extends<sp/>A2ARequest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StreamRes<sp/>extends<sp/>JSONRPCResponse,</highlight></codeline>
<codeline><highlight class="normal">&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>baseUrl:<sp/>URL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>Req[&quot;method&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params:<sp/>Req[&quot;params&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>customHeaders:<sp/>Record&lt;string,<sp/>string&gt;</highlight></codeline>
<codeline><highlight class="normal">):<sp/>AsyncIterable&lt;NonNullable&lt;StreamRes[&quot;result&quot;]&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logDebug(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;executeStreamEvents&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`Sending<sp/>streaming<sp/>request<sp/>to:<sp/>${baseUrl.toString()},<sp/>method:<sp/>${method}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>responsePromise<sp/>=<sp/>sendJsonRpcRequest(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseUrl,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>method,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>customHeaders,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;text/event-stream&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>response<sp/>=<sp/>await<sp/>responsePromise;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logDebug(&quot;executeStreamEvents&quot;,<sp/>&quot;Response&quot;,<sp/>response);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>yield*<sp/>handleEventStream&lt;StreamRes&gt;(response);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mpickett/Artinet/artinet-sdk/src/transport/streaming/event-stream.ts"/>
  </compounddef>
</doxygen>
