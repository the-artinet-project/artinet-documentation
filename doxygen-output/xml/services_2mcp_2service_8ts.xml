<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="services_2mcp_2service_8ts" kind="file" language="C++">
    <compoundname>service.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>McpServer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ToolCallback,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;@modelcontextprotocol/sdk/server/mcp.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>StreamableHTTPServerTransport<sp/>}<sp/>from<sp/>&quot;@modelcontextprotocol/sdk/server/streamableHttp.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>Protocol<sp/>}<sp/>from<sp/>&quot;../../types/services/protocol.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ExecutionContext,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MCPExecutionContext,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../types/services/context.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>AgentSkill<sp/>}<sp/>from<sp/>&quot;../../types/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CallToolResult,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Implementation,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;@modelcontextprotocol/sdk/types.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>ServerOptions<sp/>}<sp/>from<sp/>&quot;@modelcontextprotocol/sdk/server/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>AgentEngine<sp/>}<sp/>from<sp/>&quot;../../types/services/context.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>ZodRawShape<sp/>}<sp/>from<sp/>&quot;zod&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MCPTool,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MCPRequestParamsSchema,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MCPServiceInterface,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../types/services/mcp/service.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>class<sp/>MCPService&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>extends<sp/>StreamableHTTPServerTransport<sp/>=<sp/>StreamableHTTPServerTransport,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>extends<sp/>McpServer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>implements<sp/>MCPServiceInterface</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>readonly<sp/>name:<sp/>string;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>readonly<sp/>protocol:<sp/>Protocol.MCP;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>readonly<sp/>engine:<sp/>AgentEngine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constructor({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>serverInfo,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>engine,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>options,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>skills,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>serverInfo:<sp/>Implementation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>engine:<sp/>AgentEngine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>skills?:<sp/>AgentSkill[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>options?:<sp/>ServerOptions;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>super(serverInfo,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.name<sp/>=<sp/>&quot;mcp&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.protocol<sp/>=<sp/>Protocol.MCP;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.engine<sp/>=<sp/>engine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(skills)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.initialize(skills);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>initialize(skills:<sp/>AgentSkill[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>skill<sp/>of<sp/>skills)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>tool<sp/>=<sp/>MCPService.skillToTool(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MCPRequestParamsSchema.shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MCPService.mcpFactory(this.engine)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>super.tool(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill.name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill.description<sp/>??<sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tool.paramsSchemaOrAnnotations,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tool.cb</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>execute({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>executionContext,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>executionContext:<sp/>ExecutionContext&lt;MCPExecutionContext&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>engine:<sp/>AgentEngine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}):<sp/>Promise&lt;void&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!executionContext.requestContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(&quot;No<sp/>request<sp/>context&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>{<sp/>request,<sp/>transport,<sp/>response<sp/>}<sp/>=<sp/>executionContext.requestContext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>validTransport<sp/>=<sp/>transport<sp/>as<sp/>T;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validTransport)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(&quot;Invalid<sp/>transport&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>await<sp/>super.connect(validTransport);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>await<sp/>validTransport.handleRequest(request,<sp/>response,<sp/>request.body);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>stop():<sp/>Promise&lt;void&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>await<sp/>super.close();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>mcpFactory&lt;Args<sp/>extends<sp/>MCPExecutionContext<sp/>=<sp/>MCPExecutionContext&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>engine:<sp/>AgentEngine</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>):<sp/>(args:<sp/>Args[&quot;params&quot;])<sp/>=&gt;<sp/>Promise&lt;string&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>async<sp/>(args:<sp/>Args[&quot;params&quot;])<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>context:<sp/>ExecutionContext&lt;Args&gt;<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id:<sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protocol:<sp/>Protocol.MCP,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getRequestParams:<sp/>()<sp/>=&gt;<sp/>args,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isCancelled:<sp/>()<sp/>=&gt;<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>generator<sp/>=<sp/>await<sp/>engine(context);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>finalResult:<sp/>any;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>await<sp/>(const<sp/>event<sp/>of<sp/>generator)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalResult<sp/>=<sp/>event;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>Promise.resolve();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>JSON.stringify(finalResult);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>skillToTool&lt;Args<sp/>extends<sp/>ZodRawShape<sp/>=<sp/>ZodRawShape&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>skill:<sp/>AgentSkill,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>argShape:<sp/>Args,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>agentHandler:<sp/>(...args:<sp/>Parameters&lt;ToolCallback&lt;Args&gt;&gt;)<sp/>=&gt;<sp/>Promise&lt;string&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>):<sp/>MCPTool&lt;Args&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>skillTool:<sp/>MCPTool&lt;Args&gt;<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>skill.name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>description:<sp/>skill.description,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paramsSchemaOrAnnotations:<sp/>argShape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cb:<sp/>async<sp/>(...args)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>toolResult:<sp/>CallToolResult<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>&quot;text&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text:<sp/>await<sp/>agentHandler(...args),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>toolResult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>skillTool;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/davronbekimamov/Desktop/content-synchro/artinet-sdk/src/services/mcp/service.ts"/>
  </compounddef>
</doxygen>
