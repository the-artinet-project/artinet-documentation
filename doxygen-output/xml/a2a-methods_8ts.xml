<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="a2a-methods_8ts" kind="file" language="C++">
    <compoundname>a2a-methods.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{<sp/>TaskState,<sp/>TaskYieldUpdate,<sp/>Task<sp/>}<sp/>from<sp/>&quot;../../../types/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>extractTaskId,<sp/>getCurrentTimestamp<sp/>}<sp/>from<sp/>&quot;../../../utils/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>logError,<sp/>logWarn<sp/>}<sp/>from<sp/>&quot;../../../utils/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>loadState,<sp/>updateState<sp/>}<sp/>from<sp/>&quot;../state.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>INTERNAL_ERROR,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>INVALID_PARAMS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PUSH_NOTIFICATION_NOT_SUPPORTED,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TASK_NOT_CANCELABLE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TASK_NOT_FOUND,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAILED_UPDATE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SystemError,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../../utils/index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SendTaskMethod,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GetTaskMethod,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CancelTaskMethod,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SetTaskPushNotificationMethod,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GetTaskPushNotificationMethod,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../interfaces/params.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>FINAL_STATES<sp/>}<sp/>from<sp/>&quot;../../../utils/index.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>defaultSendTaskMethod:<sp/>SendTaskMethod<sp/>=<sp/>async<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>deps,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>requestParams,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callback</highlight></codeline>
<codeline><highlight class="normal">)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>{<sp/>taskStore,<sp/>taskHandler,<sp/>createTaskContext<sp/>}<sp/>=<sp/>deps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>taskId<sp/>=<sp/>extractTaskId(requestParams.id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>{<sp/>message,<sp/>sessionId,<sp/>metadata<sp/>}<sp/>=<sp/>requestParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>let<sp/>currentData<sp/>=<sp/>await<sp/>loadState(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>taskStore,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>taskId,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sessionId,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metadata</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>context<sp/>=<sp/>createTaskContext(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>currentData.task,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>currentData.history</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>generator<sp/>=<sp/>taskHandler(context);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>await<sp/>(const<sp/>update<sp/>of<sp/>generator)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentData<sp/>=<sp/>await<sp/>updateState(taskStore,<sp/>currentData,<sp/>update);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>callback(null,<sp/>currentData.task);<sp/>//<sp/>Success</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(innerError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>failedUpdate:<sp/>TaskYieldUpdate<sp/>=<sp/>FAILED_UPDATE(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>`Task<sp/>processing<sp/>failed:<sp/>${innerError<sp/>instanceof<sp/>Error<sp/>?<sp/>innerError.message<sp/>:<sp/>String(innerError)}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Ensure<sp/>state<sp/>is<sp/>saved<sp/>before<sp/>calling<sp/>callback<sp/>with<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>await<sp/>updateState(taskStore,<sp/>currentData,<sp/>failedUpdate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Throwing<sp/>here<sp/>would<sp/>be<sp/>caught<sp/>by<sp/>createMethod&apos;s<sp/>catch<sp/>block</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(innerError<sp/>instanceof<sp/>SystemError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>innerError;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INTERNAL_ERROR(innerError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>defaultGetTaskMethod:<sp/>GetTaskMethod<sp/>=<sp/>async<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>deps,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>requestParams,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callback</highlight></codeline>
<codeline><highlight class="normal">)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>{<sp/>taskStore<sp/>}<sp/>=<sp/>deps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>taskId<sp/>=<sp/>extractTaskId(requestParams.id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!taskId)<sp/>throw<sp/>INVALID_PARAMS(&quot;Missing<sp/>task<sp/>ID&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>data<sp/>=<sp/>await<sp/>taskStore.load(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(&quot;taskGetLogic&quot;,<sp/>&quot;Task<sp/>not<sp/>found&quot;,<sp/>{<sp/>taskId<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>TASK_NOT_FOUND(&quot;Task<sp/>Id:<sp/>&quot;<sp/>+<sp/>taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callback(null,<sp/>data.task);<sp/>//<sp/>Success</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>defaultCancelTaskMethod:<sp/>CancelTaskMethod<sp/>=<sp/>async<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>deps,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>requestParams,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callback</highlight></codeline>
<codeline><highlight class="normal">)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>{<sp/>taskStore,<sp/>activeCancellations,<sp/>closeStreamsForTask<sp/>}<sp/>=<sp/>deps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>taskId<sp/>=<sp/>extractTaskId(requestParams.id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!taskId)<sp/>throw<sp/>INVALID_PARAMS(&quot;Missing<sp/>task<sp/>ID&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>data<sp/>=<sp/>await<sp/>taskStore.load(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!data)<sp/>throw<sp/>TASK_NOT_FOUND(&quot;Task<sp/>Id:<sp/>&quot;<sp/>+<sp/>taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(FINAL_STATES.includes(data.task.status.state))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>TASK_NOT_CANCELABLE(&quot;Task<sp/>is<sp/>in<sp/>a<sp/>final<sp/>state&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>activeCancellations.add(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>canceledTask:<sp/>Task<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...data.task,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state:<sp/>&quot;canceled&quot;<sp/>as<sp/>TaskState,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timestamp:<sp/>getCurrentTimestamp(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>role:<sp/>&quot;agent&quot;<sp/>as<sp/>const,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts:<sp/>[{<sp/>type:<sp/>&quot;text&quot;<sp/>as<sp/>const,<sp/>text:<sp/>&quot;Task<sp/>was<sp/>canceled.&quot;<sp/>}],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>updatedData<sp/>=<sp/>{<sp/>task:<sp/>canceledTask,<sp/>history:<sp/>data.history<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>await<sp/>taskStore.save(updatedData);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>closeStreamsForTask(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>callback(null,<sp/>canceledTask);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>defaultSetTaskPushNotificationMethod:<sp/>SetTaskPushNotificationMethod<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>(deps,<sp/>requestParams,<sp/>callback)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>{<sp/>taskStore,<sp/>card<sp/>}<sp/>=<sp/>deps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logWarn(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tasks/pushNotification/set&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Push<sp/>notifications<sp/>not<sp/>fully<sp/>implemented.&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!card.capabilities?.pushNotifications)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PUSH_NOTIFICATION_NOT_SUPPORTED(&quot;Push<sp/>notifications<sp/>not<sp/>supported&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>config<sp/>=<sp/>requestParams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>taskId<sp/>=<sp/>extractTaskId(config.id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!taskId<sp/>||<sp/>!config.pushNotificationConfig?.url)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Missing<sp/>task<sp/>ID<sp/>or<sp/>push<sp/>notification<sp/>URL&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>data<sp/>=<sp/>await<sp/>taskStore.load(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>TASK_NOT_FOUND(&quot;Task<sp/>Id:<sp/>&quot;<sp/>+<sp/>taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>callback(null,<sp/>config);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>defaultGetTaskPushNotificationMethod:<sp/>GetTaskPushNotificationMethod<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>(deps,<sp/>requestParams,<sp/>callback)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>{<sp/>taskStore,<sp/>card<sp/>}<sp/>=<sp/>deps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logWarn(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tasks/pushNotification/get&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Push<sp/>notifications<sp/>not<sp/>fully<sp/>implemented.&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!card.capabilities?.pushNotifications)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PUSH_NOTIFICATION_NOT_SUPPORTED(&quot;Push<sp/>notifications<sp/>not<sp/>supported&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>taskId<sp/>=<sp/>extractTaskId(requestParams.id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!taskId)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Missing<sp/>task<sp/>ID&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>data<sp/>=<sp/>await<sp/>taskStore.load(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>TASK_NOT_FOUND(&quot;Task<sp/>Id:<sp/>&quot;<sp/>+<sp/>taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>callback(null,<sp/>null);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
    </programlisting>
    <location file="/Users/davronbekimamov/Desktop/content-synchro/artinet-sdk/src/server/lib/middleware/a2a-methods.ts"/>
  </compounddef>
</doxygen>
