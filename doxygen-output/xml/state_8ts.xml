<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="state_8ts" kind="file" language="C++">
    <compoundname>state.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{<sp/>getCurrentTimestamp<sp/>}<sp/>from<sp/>&quot;../../utils/common/utils.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Task,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Artifact,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TaskState,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../types/extended-schema.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>TaskAndHistory<sp/>}<sp/>from<sp/>&quot;../interfaces/store.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>TaskStore<sp/>}<sp/>from<sp/>&quot;../interfaces/store.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>v4<sp/>as<sp/>uuidv4<sp/>}<sp/>from<sp/>&quot;uuid&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>update,<sp/>UpdateProps<sp/>}<sp/>from<sp/>&quot;./update/base.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//todo:<sp/>move<sp/>to<sp/>update.ts</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>updateByIndex(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>append:<sp/>boolean,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>artifacts:<sp/>Artifact[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>index:<sp/>number,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>artifactUpdate:<sp/>Artifact</highlight></codeline>
<codeline><highlight class="normal">):<sp/>{<sp/>artifacts:<sp/>Artifact[];<sp/>replaced:<sp/>boolean<sp/>}<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(append)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>existingArtifact:<sp/>Artifact<sp/>=<sp/>artifacts[index];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>existingArtifact.parts.push(...artifactUpdate.parts);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(artifactUpdate.metadata)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>existingArtifact.metadata<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...(existingArtifact.metadata<sp/>||<sp/>{}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...artifactUpdate.metadata,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(artifactUpdate.description)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>existingArtifact.description<sp/>=<sp/>artifactUpdate.description;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(artifactUpdate.name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>existingArtifact.name<sp/>=<sp/>artifactUpdate.name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>artifacts[index]<sp/>=<sp/>existingArtifact;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>artifacts[index]<sp/>=<sp/>{<sp/>...artifactUpdate<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>{<sp/>artifacts,<sp/>replaced:<sp/>true<sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//todo:<sp/>move<sp/>to<sp/>update.ts</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>processArtifactUpdate(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>append:<sp/>boolean,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>artifacts:<sp/>Artifact[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>artifactUpdate:<sp/>Artifact</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Artifact[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>existingIndex<sp/>=<sp/>artifacts.findIndex(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(a)<sp/>=&gt;<sp/>a.artifactId<sp/>===<sp/>artifactUpdate.artifactId</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>let<sp/>replaced<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>let<sp/>newArtifacts<sp/>=<sp/>artifacts;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(existingIndex<sp/>!==<sp/>-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>({<sp/>artifacts:<sp/>newArtifacts,<sp/>replaced<sp/>}<sp/>=<sp/>updateByIndex(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>append,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>artifacts,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>existingIndex,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>artifactUpdate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!replaced)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>newArtifacts.push({<sp/>...artifactUpdate<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>newArtifacts;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>processUpdate(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskStore:<sp/>TaskStore,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>updateProps:<sp/>UpdateProps</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;TaskAndHistory&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(await<sp/>update(updateProps)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(&quot;processUpdate:<sp/>Invalid<sp/>update&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>await<sp/>taskStore.save(updateProps.current);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>updateProps.current;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Loads<sp/>or<sp/>creates<sp/>a<sp/>task<sp/>and<sp/>its<sp/>history.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>taskId<sp/>The<sp/>task<sp/>ID</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>message<sp/>The<sp/>message<sp/>to<sp/>process</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>contextId<sp/>Optional<sp/>context<sp/>ID</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>metadata<sp/>Optional<sp/>metadata</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>The<sp/>task<sp/>and<sp/>history</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>loadState(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskStore:<sp/>TaskStore,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>message:<sp/>Message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata?:<sp/>Record&lt;string,<sp/>unknown&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskId?:<sp/>string,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>contextId?:<sp/>string</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;TaskAndHistory&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(taskId)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>existingData:<sp/>TaskAndHistory<sp/>|<sp/>null<sp/>=<sp/>await<sp/>taskStore.load(taskId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(existingData)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>existingData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>timestamp<sp/>=<sp/>getCurrentTimestamp();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>newTask:<sp/>Task<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>id:<sp/>taskId<sp/>??<sp/>uuidv4(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>contextId:<sp/>contextId<sp/>??<sp/>uuidv4(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kind:<sp/>&quot;task&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state:<sp/>TaskState.Submitted,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timestamp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metadata:<sp/>metadata,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>message.taskId<sp/>=<sp/>newTask.id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>message.contextId<sp/>=<sp/>newTask.contextId;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>newHistory:<sp/>Message[]<sp/>=<sp/>[message];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>{<sp/>task:<sp/>newTask,<sp/>history:<sp/>newHistory<sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/davronbekimamov/Desktop/content-synchro/artinet-sdk/src/server/lib/state.ts"/>
  </compounddef>
</doxygen>
