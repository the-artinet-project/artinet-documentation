<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="task-wrapper_8ts" kind="file" language="C++">
    <compoundname>task-wrapper.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{<sp/>Task,<sp/>TaskContext,<sp/>TaskYieldUpdate<sp/>}<sp/>from<sp/>&quot;../../index.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>env<sp/>}<sp/>from<sp/>&quot;process&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@fileoverview<sp/>This<sp/>module<sp/>provides<sp/>proxy<sp/>functions<sp/>for<sp/>agent<sp/>task<sp/>handling<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>fetching<sp/>responses<sp/>within<sp/>a<sp/>managed<sp/>deployment<sp/>environment.<sp/>These<sp/>proxies</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>abstract<sp/>the<sp/>communication<sp/>with<sp/>the<sp/>host<sp/>environment,<sp/>allowing<sp/>agent<sp/>code<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>remain<sp/>clean<sp/>and<sp/>focused<sp/>on<sp/>its<sp/>core<sp/>logic.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Proxies<sp/>task<sp/>execution<sp/>to<sp/>a<sp/>host-provided<sp/>handler.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>within<sp/>an<sp/>agent&apos;s<sp/>code<sp/>when<sp/>deployed<sp/>to<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>managed<sp/>environment.<sp/>It<sp/>takes<sp/>the<sp/>agent&apos;s<sp/>core<sp/>task-handling<sp/>generator<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>and<sp/>iterates<sp/>over<sp/>its<sp/>yielded<sp/>updates,<sp/>passing<sp/>them<sp/>to<sp/>a<sp/>`hostOnYield`<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>made<sp/>available<sp/>in<sp/>the<sp/>`env`<sp/>by<sp/>the<sp/>host<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>`Context`<sp/>(TaskContext)<sp/>is<sp/>also<sp/>expected<sp/>to<sp/>be<sp/>provided<sp/>by<sp/>the<sp/>host<sp/>environment<sp/>via<sp/>`env`.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>taskHandler<sp/>-<sp/>An<sp/>asynchronous<sp/>generator<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>`TaskContext`</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>yields<sp/>`TaskYieldUpdate`<sp/>objects,<sp/>eventually<sp/>returning<sp/>a<sp/>`Task`<sp/>or<sp/>void.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>An<sp/>error<sp/>if<sp/>the<sp/>required<sp/>`env.hostOnYield`<sp/>or<sp/>`env.Context`<sp/>are<sp/>not<sp/>found,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicating<sp/>an<sp/>invalid<sp/>runtime<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>taskHandlerProxy<sp/>=<sp/>async<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskHandler:<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context:<sp/>TaskContext</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>=&gt;<sp/>AsyncGenerator&lt;TaskYieldUpdate,<sp/>Task<sp/>|<sp/>void,<sp/>unknown&gt;</highlight></codeline>
<codeline><highlight class="normal">)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!env.hostOnYield<sp/>&amp;&amp;<sp/>!env.Context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>err<sp/>=<sp/>new<sp/>Error(&quot;invalid<sp/>runtime<sp/>environment&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>err;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>context<sp/>=<sp/>env.Context<sp/>as<sp/>unknown<sp/>as<sp/>TaskContext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>onYieldProxy<sp/>=<sp/>env.hostOnYield<sp/>as<sp/>unknown<sp/>as<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>yieldValue:<sp/>TaskYieldUpdate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>=&gt;<sp/>Promise&lt;void&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!onYieldProxy<sp/>||<sp/>!context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>err<sp/>=<sp/>new<sp/>Error(&quot;invalid<sp/>runtime<sp/>environment&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>err;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>generator<sp/>=<sp/>taskHandler(context);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>await<sp/>(const<sp/>yieldValue<sp/>of<sp/>generator)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onYieldProxy(yieldValue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Proxies<sp/>requests<sp/>to<sp/>fetch<sp/>responses<sp/>from<sp/>other<sp/>agents<sp/>or<sp/>LLMs<sp/>to<sp/>a<sp/>host-provided<sp/>implementation.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>allows<sp/>agents<sp/>in<sp/>a<sp/>managed<sp/>environment<sp/>to<sp/>make<sp/>external<sp/>calls<sp/>(e.g.,<sp/>to<sp/>an<sp/>LLM)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>without<sp/>needing<sp/>direct<sp/>network<sp/>access<sp/>or<sp/>credentials.<sp/>The<sp/>actual<sp/>implementation<sp/>of<sp/>fetching</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>response<sp/>is<sp/>delegated<sp/>to<sp/>`env.hostFetchResponse`,<sp/>provided<sp/>by<sp/>the<sp/>host<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>agentID<sp/>-<sp/>The<sp/>identifier<sp/>of<sp/>the<sp/>target<sp/>agent<sp/>or<sp/>LLM<sp/>to<sp/>which<sp/>the<sp/>request<sp/>is<sp/>directed.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>messages<sp/>-<sp/>An<sp/>array<sp/>of<sp/>messages<sp/>forming<sp/>the<sp/>conversation<sp/>history<sp/>or<sp/>prompt.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>promise<sp/>that<sp/>resolves<sp/>to<sp/>the<sp/>string<sp/>response<sp/>from<sp/>the<sp/>target<sp/>agent/LLM.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>An<sp/>error<sp/>if<sp/>the<sp/>required<sp/>`env.hostFetchResponse`<sp/>is<sp/>not<sp/>found,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicating<sp/>an<sp/>invalid<sp/>runtime<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>const<sp/>fetchResponseProxy<sp/>=<sp/>async<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>agentID:<sp/>string,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>messages:<sp/>{<sp/>role:<sp/>string;<sp/>content:<sp/>string<sp/>}[]</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;string&gt;<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!env.hostFetchResponse)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>err<sp/>=<sp/>new<sp/>Error(&quot;invalid<sp/>runtime<sp/>environment&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>err;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>fetchResponseImpl<sp/>=<sp/>env.hostFetchResponse<sp/>as<sp/>unknown<sp/>as<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>agentID:<sp/>string,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>messages:<sp/>{<sp/>role:<sp/>string;<sp/>content:<sp/>string<sp/>}[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>=&gt;<sp/>Promise&lt;string&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>fetchResponseImpl(agentID,<sp/>messages);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/Users/davronbekimamov/Desktop/content-synchro/artinet-sdk/src/utils/deployment/task-wrapper.ts"/>
  </compounddef>
</doxygen>
