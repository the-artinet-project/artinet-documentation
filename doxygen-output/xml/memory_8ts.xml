<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="memory_8ts" kind="file" language="C++">
    <compoundname>memory.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{<sp/>TaskAndHistory,<sp/>TaskStore<sp/>}<sp/>from<sp/>&quot;../../interfaces/store.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>logDebug<sp/>}<sp/>from<sp/>&quot;../../../utils/logging/log.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>In-memory<sp/>implementation<sp/>of<sp/>the<sp/>TaskStore<sp/>interface.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Stores<sp/>tasks<sp/>and<sp/>their<sp/>history<sp/>in<sp/>memory.<sp/>Not<sp/>persisted<sp/>between<sp/>server<sp/>restarts.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>class<sp/>InMemoryTaskStore<sp/>implements<sp/>TaskStore<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>private<sp/>store:<sp/>Map&lt;string,<sp/>TaskAndHistory&gt;<sp/>=<sp/>new<sp/>Map();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Loads<sp/>a<sp/>task<sp/>and<sp/>its<sp/>history<sp/>by<sp/>task<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>taskId<sp/>The<sp/>ID<sp/>of<sp/>the<sp/>task<sp/>to<sp/>load.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@returns<sp/>A<sp/>promise<sp/>resolving<sp/>to<sp/>the<sp/>task<sp/>and<sp/>history,<sp/>or<sp/>null<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>load(taskId:<sp/>string):<sp/>Promise&lt;TaskAndHistory<sp/>|<sp/>null&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logDebug(&quot;InMemoryTaskStore&quot;,<sp/>`Loading<sp/>task:<sp/>${taskId}`);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>entry<sp/>=<sp/>this.store.get(taskId);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>copies<sp/>to<sp/>prevent<sp/>external<sp/>mutation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>entry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task:<sp/>{<sp/>...entry.task<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history:<sp/>[...entry.history],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>null;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Saves<sp/>a<sp/>task<sp/>and<sp/>its<sp/>history.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>data<sp/>The<sp/>task<sp/>and<sp/>history<sp/>to<sp/>save.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@returns<sp/>A<sp/>promise<sp/>that<sp/>resolves<sp/>when<sp/>the<sp/>save<sp/>is<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>async<sp/>save(data:<sp/>TaskAndHistory):<sp/>Promise&lt;void&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logDebug(&quot;InMemoryTaskStore&quot;,<sp/>`Saving<sp/>task:<sp/>${data.task.id}`);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>copies<sp/>to<sp/>prevent<sp/>internal<sp/>mutation<sp/>if<sp/>caller<sp/>reuses<sp/>objects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.store.set(data.task.id,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task:<sp/>{<sp/>...data.task<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>history:<sp/>[...data.history],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mpickett/Artinet/artinet-sdk/src/server/lib/storage/memory.ts"/>
  </compounddef>
</doxygen>
