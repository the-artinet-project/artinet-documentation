<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utils_8ts" kind="file" language="C++">
    <compoundname>utils.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>{<sp/>MessageSendParams,<sp/>Part<sp/>}<sp/>from<sp/>&quot;../../types/extended-schema.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>INVALID_PARAMS<sp/>}<sp/>from<sp/>&quot;./errors.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Generates<sp/>a<sp/>timestamp<sp/>in<sp/>ISO<sp/>8601<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>The<sp/>current<sp/>timestamp<sp/>as<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>getCurrentTimestamp():<sp/>string<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>new<sp/>Date().toISOString();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Checks<sp/>if<sp/>a<sp/>value<sp/>is<sp/>a<sp/>plain<sp/>object<sp/>(excluding<sp/>arrays<sp/>and<sp/>null).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>value<sp/>The<sp/>value<sp/>to<sp/>check.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>True<sp/>if<sp/>the<sp/>value<sp/>is<sp/>a<sp/>plain<sp/>object,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>isObject(value:<sp/>unknown):<sp/>value<sp/>is<sp/>Record&lt;string,<sp/>any&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>typeof<sp/>value<sp/>===<sp/>&quot;object&quot;<sp/>&amp;&amp;<sp/>value<sp/>!==<sp/>null<sp/>&amp;&amp;<sp/>!Array.isArray(value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Validates<sp/>a<sp/>task<sp/>send<sp/>parameters<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>params<sp/>The<sp/>parameters<sp/>to<sp/>validate</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>INVALID_PARAMS<sp/>if<sp/>the<sp/>parameters<sp/>are<sp/>invalid</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>validateSendMessageParams(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params:<sp/>any</highlight></codeline>
<codeline><highlight class="normal">):<sp/>asserts<sp/>params<sp/>is<sp/>MessageSendParams<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Structure<sp/>validation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!params<sp/>||<sp/>typeof<sp/>params<sp/>!==<sp/>&quot;object&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Invalid<sp/>parameters&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Message<sp/>validation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!params.message<sp/>||<sp/>typeof<sp/>params.message<sp/>!==<sp/>&quot;object&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Invalid<sp/>message&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Role<sp/>validation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(params.message.role<sp/>!==<sp/>&quot;user&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Invalid<sp/>message<sp/>role&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Parts<sp/>validation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>!Array.isArray(params.message.parts)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.message.parts.length<sp/>===<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Invalid<sp/>message<sp/>parts&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.message.parts.some(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(part:<sp/>Part)<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!part.kind<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(part.kind<sp/>!==<sp/>&quot;text&quot;<sp/>&amp;&amp;<sp/>part.kind<sp/>!==<sp/>&quot;data&quot;<sp/>&amp;&amp;<sp/>part.kind<sp/>!==<sp/>&quot;file&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Message<sp/>parts<sp/>must<sp/>be<sp/>text,<sp/>data,<sp/>or<sp/>file&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>extractTaskId(id:<sp/>number<sp/>|<sp/>string<sp/>|<sp/>null<sp/>|<sp/>undefined):<sp/>string<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INVALID_PARAMS(&quot;Missing<sp/>task<sp/>ID&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(typeof<sp/>id<sp/>===<sp/>&quot;number&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>id.toString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>id;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mpickett/Artinet/artinet-sdk/src/utils/common/utils.ts"/>
  </compounddef>
</doxygen>
