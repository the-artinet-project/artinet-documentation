<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="rpc-client_8ts" kind="file" language="C++">
    <compoundname>rpc-client.ts</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>HTTP<sp/>JSON-RPC<sp/>client<sp/>utilities.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Handles<sp/>the<sp/>common<sp/>pattern<sp/>of<sp/>sending<sp/>JSON-RPC<sp/>requests<sp/>and<sp/>processing<sp/>responses.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>v4<sp/>as<sp/>uuidv4<sp/>}<sp/>from<sp/>&quot;uuid&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SystemError,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>INTERNAL_ERROR,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PARSE_ERROR,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../utils/common/errors.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>type<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>JSONRPCRequest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>JSONRPCResponse,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A2ARequest,</highlight></codeline>
<codeline><highlight class="normal">}<sp/>from<sp/>&quot;../../types/extended-schema.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>parseResponse<sp/>}<sp/>from<sp/>&quot;./parser.js&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{<sp/>logError,<sp/>logWarn<sp/>}<sp/>from<sp/>&quot;../../utils/logging/log.js&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Creates<sp/>a<sp/>JSON-RPC<sp/>request<sp/>body<sp/>with<sp/>the<sp/>specified<sp/>method<sp/>and<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*,<sp/>ErrorCodeParseError</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>method<sp/>The<sp/>JSON-RPC<sp/>method<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>params<sp/>The<sp/>parameters<sp/>for<sp/>the<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>requestId<sp/>Optional<sp/>request<sp/>ID<sp/>(generates<sp/>a<sp/>UUID<sp/>v4<sp/>if<sp/>not<sp/>provided)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>properly<sp/>formatted<sp/>JSON-RPC<sp/>request<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>function<sp/>createJsonRpcRequest&lt;Req<sp/>extends<sp/>A2ARequest&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>Req[&quot;method&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params:<sp/>Req[&quot;params&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>requestId:<sp/>string<sp/>|<sp/>number<sp/>=<sp/>uuidv4()</highlight></codeline>
<codeline><highlight class="normal">):<sp/>JSONRPCRequest<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jsonrpc:<sp/>&quot;2.0&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>id:<sp/>requestId,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>method,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Sends<sp/>a<sp/>JSON-RPC<sp/>request<sp/>to<sp/>the<sp/>specified<sp/>endpoint.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>baseUrl<sp/>The<sp/>API<sp/>endpoint<sp/>URL</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>method<sp/>The<sp/>JSON-RPC<sp/>method<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>params<sp/>The<sp/>parameters<sp/>for<sp/>the<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>headers<sp/>Custom<sp/>headers<sp/>to<sp/>include<sp/>in<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>acceptHeader<sp/>The<sp/>desired<sp/>Accept<sp/>header<sp/>(&apos;application/json&apos;<sp/>or<sp/>&apos;text/event-stream&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>Promise<sp/>resolving<sp/>to<sp/>the<sp/>fetch<sp/>Response<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>a<sp/>network<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>sendJsonRpcRequest&lt;Req<sp/>extends<sp/>A2ARequest&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>baseUrl:<sp/>URL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>Req[&quot;method&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params:<sp/>Req[&quot;params&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>Record&lt;string,<sp/>string&gt;<sp/>=<sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acceptHeader:<sp/>&quot;application/json&quot;<sp/>|<sp/>&quot;text/event-stream&quot;<sp/>=<sp/>&quot;application/json&quot;</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;Response&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>requestBody<sp/>=<sp/>createJsonRpcRequest(method,<sp/>params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>await<sp/>fetch(baseUrl,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>method:<sp/>&quot;POST&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Content-Type&quot;:<sp/>&quot;application/json&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept:<sp/>acceptHeader,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...headers,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>body:<sp/>JSON.stringify(requestBody),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(networkError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;SendJsonRpcRequest&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Network<sp/>error<sp/>during<sp/>RPC<sp/>call:&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>networkError</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Wrap<sp/>network<sp/>errors<sp/>into<sp/>a<sp/>standard<sp/>error<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INTERNAL_ERROR(networkError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Sends<sp/>a<sp/>GET<sp/>request<sp/>to<sp/>the<sp/>specified<sp/>endpoint.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>is<sp/>used<sp/>for<sp/>non-JSON-RPC<sp/>calls<sp/>like<sp/>agent<sp/>card<sp/>retrieval.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>url<sp/>The<sp/>endpoint<sp/>URL</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>headers<sp/>Custom<sp/>headers<sp/>to<sp/>include<sp/>in<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>Promise<sp/>resolving<sp/>to<sp/>the<sp/>fetch<sp/>Response<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>a<sp/>network<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>sendGetRequest(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>URL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>Record&lt;string,<sp/>string&gt;<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;Response&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>await<sp/>fetch(url,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>method:<sp/>&quot;GET&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept:<sp/>&quot;application/json&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...headers,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(networkError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;SendGetRequest&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Network<sp/>error<sp/>during<sp/>GET<sp/>request:&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>networkError</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>INTERNAL_ERROR(networkError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Processes<sp/>a<sp/>standard<sp/>JSON-RPC<sp/>response<sp/>(non-streaming).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Parses<sp/>the<sp/>response,<sp/>validates<sp/>it,<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>payload.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>response<sp/>The<sp/>fetch<sp/>Response<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>expectedMethod<sp/>Optional<sp/>method<sp/>name<sp/>for<sp/>logging<sp/>purposes</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>promise<sp/>resolving<sp/>to<sp/>the<sp/>result<sp/>payload</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>an<sp/>error<sp/>in<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>handleJsonRpcResponse&lt;Res<sp/>extends<sp/>JSONRPCResponse&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>response:<sp/>Response,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expectedMethod?:<sp/>string</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;NonNullable&lt;Res[&quot;result&quot;]&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>let<sp/>responseBody:<sp/>string<sp/>|<sp/>null<sp/>=<sp/>null;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>responseBody<sp/>=<sp/>await<sp/>response.text();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!response.ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>parse<sp/>error<sp/>as<sp/>JSON-RPC</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseResponse&lt;JSONRPCResponse&gt;(responseBody);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>it<sp/>means<sp/>there<sp/>was<sp/>no<sp/>error<sp/>in<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>But<sp/>the<sp/>HTTP<sp/>status<sp/>was<sp/>not<sp/>OK,<sp/>so<sp/>we<sp/>throw<sp/>a<sp/>generic<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(parseError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logWarn(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;handleJsonRpcResponse&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Error<sp/>parsing<sp/>JSON-RPC<sp/>response:&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseError</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Throw<sp/>a<sp/>generic<sp/>HTTP<sp/>error<sp/>if<sp/>we<sp/>couldn&apos;t<sp/>extract<sp/>an<sp/>RPC<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`HTTP<sp/>error<sp/>${response.status}:<sp/>${response.statusText}${</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responseBody<sp/>?<sp/>`<sp/>-<sp/>${responseBody}`<sp/>:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Parse<sp/>and<sp/>validate<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>it<sp/>has<sp/>an<sp/>error,<sp/>parseResponse<sp/>will<sp/>throw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>it<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>result,<sp/>parseResponse<sp/>will<sp/>also<sp/>throw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>jsonResponse<sp/>=<sp/>parseResponse&lt;Res&gt;(responseBody);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>At<sp/>this<sp/>point,<sp/>we<sp/>know<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>result</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>NonNullable<sp/>is<sp/>used<sp/>in<sp/>the<sp/>return<sp/>type<sp/>to<sp/>ensure<sp/>TypeScript<sp/>knows<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>jsonResponse.result<sp/>as<sp/>NonNullable&lt;Res[&quot;result&quot;]&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(error)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;handleJsonRpcResponse&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>`Error<sp/>processing<sp/>response<sp/>[${expectedMethod}]:`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Re-throw<sp/>RpcError<sp/>instances<sp/>directly,<sp/>wrap<sp/>others</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(error<sp/>instanceof<sp/>SystemError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>error;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>INTERNAL_ERROR(error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Processes<sp/>a<sp/>JSON<sp/>response<sp/>from<sp/>a<sp/>regular<sp/>GET<sp/>request.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Handles<sp/>error<sp/>checking<sp/>and<sp/>returns<sp/>the<sp/>parsed<sp/>JSON.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>response<sp/>The<sp/>fetch<sp/>Response<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>endpoint<sp/>Optional<sp/>endpoint<sp/>description<sp/>for<sp/>logging<sp/>purposes</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>promise<sp/>resolving<sp/>to<sp/>the<sp/>parsed<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>a<sp/>response<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>handleJsonResponse&lt;T&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>response:<sp/>Response,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>endpoint?:<sp/>string</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;T&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>let<sp/>responseBody:<sp/>string<sp/>|<sp/>null<sp/>=<sp/>null;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>responseBody<sp/>=<sp/>await<sp/>response.text();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!response.ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>Error(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`HTTP<sp/>error<sp/>${response.status}:<sp/>${response.statusText}${</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responseBody<sp/>?<sp/>`<sp/>-<sp/>${responseBody}`<sp/>:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>JSON.parse(responseBody)<sp/>as<sp/>T;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(error)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logError(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;handleJsonResponse&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>`Error<sp/>processing<sp/>response<sp/>for<sp/>${endpoint<sp/>||<sp/>&quot;unknown<sp/>endpoint&quot;}:`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(error<sp/>instanceof<sp/>SystemError)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>error;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PARSE_ERROR(error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Sends<sp/>a<sp/>JSON-RPC<sp/>request<sp/>and<sp/>processes<sp/>the<sp/>response<sp/>in<sp/>a<sp/>single<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>combines<sp/>sendJsonRpcRequest<sp/>and<sp/>handleJsonRpcResponse<sp/>into<sp/>one<sp/>call.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>baseUrl<sp/>The<sp/>API<sp/>endpoint<sp/>URL</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>method<sp/>The<sp/>JSON-RPC<sp/>method<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>params<sp/>The<sp/>parameters<sp/>for<sp/>the<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>headers<sp/>Custom<sp/>headers<sp/>to<sp/>include<sp/>in<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>acceptHeader<sp/>The<sp/>desired<sp/>Accept<sp/>header<sp/>(&apos;application/json&apos;<sp/>or<sp/>&apos;text/event-stream&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>Promise<sp/>resolving<sp/>to<sp/>the<sp/>result<sp/>payload</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>a<sp/>network<sp/>error<sp/>or<sp/>error<sp/>in<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>executeJsonRpcRequest&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Req<sp/>extends<sp/>A2ARequest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Res<sp/>extends<sp/>JSONRPCResponse,</highlight></codeline>
<codeline><highlight class="normal">&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>baseUrl:<sp/>URL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>Req[&quot;method&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params:<sp/>Req[&quot;params&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>Record&lt;string,<sp/>string&gt;<sp/>=<sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acceptHeader:<sp/>&quot;application/json&quot;<sp/>|<sp/>&quot;text/event-stream&quot;<sp/>=<sp/>&quot;application/json&quot;</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;NonNullable&lt;Res[&quot;result&quot;]&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>response<sp/>=<sp/>await<sp/>sendJsonRpcRequest(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseUrl,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>method,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>headers,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acceptHeader</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>handleJsonRpcResponse&lt;Res&gt;(response,<sp/>method);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Sends<sp/>a<sp/>GET<sp/>request<sp/>and<sp/>processes<sp/>the<sp/>JSON<sp/>response.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Helper<sp/>for<sp/>non-RPC<sp/>REST<sp/>endpoints.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>url<sp/>The<sp/>endpoint<sp/>URL</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>headers<sp/>Custom<sp/>headers<sp/>to<sp/>include<sp/>in<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>endpoint<sp/>Optional<sp/>endpoint<sp/>description<sp/>for<sp/>logging</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@returns<sp/>A<sp/>Promise<sp/>resolving<sp/>to<sp/>the<sp/>parsed<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@throws<sp/>RpcError<sp/>if<sp/>there&apos;s<sp/>a<sp/>network<sp/>error<sp/>or<sp/>error<sp/>in<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">export<sp/>async<sp/>function<sp/>executeGetRequest&lt;T&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>URL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>Record&lt;string,<sp/>string&gt;<sp/>=<sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>endpoint?:<sp/>string</highlight></codeline>
<codeline><highlight class="normal">):<sp/>Promise&lt;T&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>response<sp/>=<sp/>await<sp/>sendGetRequest(url,<sp/>headers);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>handleJsonResponse&lt;T&gt;(response,<sp/>endpoint);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mpickett/Artinet/artinet-sdk/src/transport/rpc/rpc-client.ts"/>
  </compounddef>
</doxygen>
